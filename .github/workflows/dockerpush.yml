name: 'DHIS2: Docker'

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: dhis2/app-hub

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    container:
      image: node:lts

    services:
      postgres:
        image: ntboes/postgres-uuid
        env:
          POSTGRES_USER: apphub
          POSTGRES_PASSWORD: apphub
          POSTGRES_DB: apphub
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5          

    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - uses: actions/checkout@v2
      - name: install deps
        run: npm install
      - name: build
        run: npm run build
      - name: run tests
        run: npm run test 
        env:
          RDS_HOSTNAME: postgres
          RDS_USERNAME: apphub
          RDS_PASSWORD: apphub
          RDS_DB_NAME: apphub
          RDS_DB_PORT: ${{ job.services.postgres.ports[5432] }}
          AUTH_STRATEGY: jwt
          AUTH0_M2M_SECRET: ${{ secrets.AUTH0_M2M_SECRET }}
          AUTH0_SECRET: ${{ secrets.AUTH0_SECRET }}
          AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
          AUTH0_DOMAIN: https://dhis2.eu.auth0.com/
          AUTH0_ALG: HS256

  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest

    if: github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip ci]')
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag image

      - name: Log into DockerHub registry
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag image $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
