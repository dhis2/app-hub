name: 'dhis2-docker ci'

on:
    push:
        # Publish `master` as Docker `latest` image.
        branches:
            - master

    release:
        types: [published]

    # Run tests for any PRs.
    pull_request:

env:
    ECR_REPOSITORY: dhis2/app-hub
    HUB_REPOSITORY: dhis2/app-hub
    AWS_REGION: eu-west-1
    IMAGE: apphub
    DEBUG: apphub*

jobs:
    test:
        name: Verify test suite
        runs-on: ubuntu-latest

        container:
            image: node:lts-slim

        services:
            postgres:
                image: dhis2/postgres-contrib
                env:
                    POSTGRES_USER: apphub
                    POSTGRES_PASSWORD: apphub
                    POSTGRES_DB: apphub
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        if: "!contains(github.event.head_commit.message, '[skip ci]')"
        steps:
            - uses: actions/checkout@v2

            - name: Install deps for tests
              run: yarn install --frozen-lockfile

            - name: Build frontend/client
              run: yarn build

            - name: Run client tests
              run: yarn test:client

            - name: Run server tests
              run: yarn test:server
              env:
                  RDS_HOSTNAME: postgres
                  RDS_USERNAME: apphub
                  RDS_PASSWORD: apphub
                  RDS_DB_NAME: apphub
                  RDS_DB_PORT: 5432
                  AUTH_STRATEGY: jwt
                  AUTH0_M2M_SECRET: ${{ secrets.AUTH0_M2M_SECRET }}
                  AUTH0_SECRET: ${{ secrets.AUTH0_SECRET }}
                  AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
                  AUTH0_DOMAIN: https://dhis2.eu.auth0.com/
                  AUTH0_ALG: HS256

    deploy:
        name: Deploy

        # Ensure test job passes before pushing image.
        needs: [test]

        runs-on: ubuntu-latest

        if: github.event_name != 'pull_request' && !contains(github.event.head_commit.message, '[skip ci]')
        steps:
            - uses: actions/checkout@v2

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Login to Docker Hub
              run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build, tag, and push image
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  SHA_TAG: ${{ github.sha }}
              run: |
                  docker build . --file Dockerfile --tag $IMAGE

                  # Strip git ref prefix from version
                  VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

                  # Strip "v" prefix from tag name
                  [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

                  # Use Docker `latest` tag convention
                  [ "$VERSION" == "master" ] && VERSION=latest

                  echo VERSION=$VERSION

                  # docker hub
                  docker tag $IMAGE $HUB_REPOSITORY:$VERSION
                  docker tag $IMAGE $HUB_REPOSITORY:$SHA_TAG
                  docker push $HUB_REPOSITORY:$VERSION
                  docker push $HUB_REPOSITORY:$SHA_TAG

                  # aws ecr
                  docker tag $IMAGE $ECR_REGISTRY/$ECR_REPOSITORY:$SHA_TAG
                  docker tag $IMAGE $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$SHA_TAG
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION

                  # set the image name for task-def step
                  echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$SHA_TAG"

                  sed -i "s|AUTOINJECTED_GH_ACTIONS|$ECR_REGISTRY/$ECR_REPOSITORY:$SHA_TAG|g" Dockerrun.aws.json
                  cat Dockerrun.aws.json
                  zip -r deploy.zip .ebextensions Dockerrun.aws.json

            - name: Deploy to Staging
              if: github.event_name == 'push'
              uses: einaregilsson/beanstalk-deploy@v6
              with:
                  aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  application_name: app-hub
                  environment_name: staging
                  version_label: app-hub-staging-${{ github.run_id }}_${{ github.run_number}}
                  region: ${{ env.AWS_REGION }}
                  deployment_package: deploy.zip

            - name: Deploy to Production
              if: github.event_name == 'release'
              uses: einaregilsson/beanstalk-deploy@v6
              with:
                  aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  application_name: app-hub
                  environment_name: prod
                  version_label: app-hub-prod-${{ github.run_id }}_${{ github.run_number}}
                  region: ${{ env.AWS_REGION }}
                  deployment_package: deploy.zip
